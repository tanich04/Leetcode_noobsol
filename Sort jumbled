#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

// Function to map a number according to the given mapping array
std::string mapValue(int num, const std::vector<int>& mapping) {
    std::string numStr = std::to_string(num);
    std::string mappedStr;
    for (char c : numStr) {
        mappedStr += std::to_string(mapping[c - '0']);
    }
    // Remove leading zeros from the mapped string
    mappedStr.erase(0, mappedStr.find_first_not_of('0'));
    if (mappedStr.empty()) {
        mappedStr = "0"; // if the string becomes empty, it means the number was zero
    }
    return mappedStr;
}

// Function to sort the jumbled numbers
std::vector<int> sortJumbled(const std::vector<int>& mapping, const std::vector<int>& nums) {
    std::vector<std::pair<std::string, int>> mappedNums;

    // Map each number and store the mapped value as a string with the original number
    for (int num : nums) {
        std::string mappedValue = mapValue(num, mapping);
        mappedNums.emplace_back(mappedValue, num);
    }

    // Sort the numbers based on their mapped values using a stable sort
    std::stable_sort(mappedNums.begin(), mappedNums.end());

    // Extract the original numbers in the sorted order
    std::vector<int> result;
    for (const auto& pair : mappedNums) {
        result.push_back(pair.second);
    }

    return result;
}

int main() {
    std::vector<int> mapping = {8, 9, 4, 0, 2, 1, 3, 5, 7, 6};
    std::vector<int> nums = {991, 338, 38};

    std::vector<int> sortedNums = sortJumbled(mapping, nums);
    for (int num : sortedNums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
