class Solution {
public:
    
        void dfs(vector<vector<int>>& isConnected, vector<bool>& visited, int i) {
        visited[i] = true;  // Mark this city as visited
        for (int j = 0; j < isConnected.size(); ++j) {
            if (isConnected[i][j] == 1 && !visited[j]) {
                dfs(isConnected, visited, j);  // Recursively visit all cities connected to city `i`
            }
        }
    }
        int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();  // Number of cities
        vector<bool> visited(n, false);  // Track visited cities
        int provinceCount = 0;  

        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {  // If city `i` has not been visited, it's the start of a new province
                dfs(isConnected, visited, i);  // Perform DFS to visit all cities in this province
                ++provinceCount;  // Increment the province counter
            }
        }

        return provinceCount;  // Return the total number of provinces
    }
};
