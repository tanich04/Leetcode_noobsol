#include <iostream>

struct ListNode {
    int value;
    ListNode* next;
    ListNode(int x) : value(x), next(nullptr) {}
};

bool hasCycle(ListNode* head) {
    if (head == nullptr || head->next == nullptr) {
        return false;
    }

    ListNode* slow = head;
    ListNode* fast = head;

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;        // Move slow pointer by 1 step
        fast = fast->next->next;  // Move fast pointer by 2 steps

        if (slow == fast) {
            return true;  // Cycle detected
        }
    }

    return false;  // No cycle
}

int main() {
    // Example usage:
    // Creating a linked list with a cycle
    // 1 -> 2 -> 3 -> 4 -> 5
    //      ^              |
    //      |--------------|
    ListNode* node1 = new ListNode(1);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(3);
    ListNode* node4 = new ListNode(4);
    ListNode* node5 = new ListNode(5);

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;
    node5->next = node2;  // Cycle here

    if (hasCycle(node1)) {
        std::cout << "Cycle detected." << std::endl;
    } else {
        std::cout << "No cycle detected." << std::endl;
    }

    // Free the allocated memory (in a real program, you should free the memory, but
    // since there's a cycle, it would be a bit tricky to do that without additional code).
    // delete node1;
    // delete node2;
    // delete node3;
    // delete node4;
    // delete node5;

    return 0;
}
