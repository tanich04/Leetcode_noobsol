#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

// Function to perform topological sort and detect cycles using Floyd-Warshall algorithm
bool detectCycle(int k, vector<vector<int>>& conditions, vector<int>& order) {
    vector<vector<bool>> graph(k + 1, vector<bool>(k + 1, false));
    vector<int> inDegree(k + 1, 0);

    for (auto& cond : conditions) {
        graph[cond[0]][cond[1]] = true;
        inDegree[cond[1]]++;
    }

    // Floyd-Warshall algorithm to detect cycles
    for (int via = 1; via <= k; ++via) {
        for (int from = 1; from <= k; ++from) {
            for (int to = 1; to <= k; ++to) {
                if (graph[from][via] && graph[via][to]) {
                    graph[from][to] = true;
                }
            }
        }
    }

    for (int i = 1; i <= k; ++i) {
        if (graph[i][i]) {
            return false;
        }
    }

    // Topological Sort
    queue<int> q;
    for (int i = 1; i <= k; ++i) {
        if (inDegree[i] == 0) {
            q.push(i);
        }
    }

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        order.push_back(node);
        for (int i = 1; i <= k; ++i) {
            if (graph[node][i]) {
                inDegree[i]--;
                if (inDegree[i] == 0) {
                    q.push(i);
                }
            }
        }
    }

    return order.size() == k;
}

vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
    vector<int> rowOrder, colOrder;

    if (!detectCycle(k, rowConditions, rowOrder) || !detectCycle(k, colConditions, colOrder)) {
        return {};
    }

    vector<vector<int>> matrix(k, vector<int>(k, 0));
    unordered_map<int, int> rowPos, colPos;

    for (int i = 0; i < k; ++i) {
        rowPos[rowOrder[i]] = i;
        colPos[colOrder[i]] = i;
    }

    for (int i = 1; i <= k; ++i) {
        matrix[rowPos[i]][colPos[i]] = i;
    }

    return matrix;
}

int main() {
    int k = 3;
    vector<vector<int>> rowConditions = {{1, 2}, {3, 2}};
    vector<vector<int>> colConditions = {{2, 1}, {3, 2}};

    vector<vector<int>> result = buildMatrix(k, rowConditions, colConditions);

    for (const auto& row : result) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
