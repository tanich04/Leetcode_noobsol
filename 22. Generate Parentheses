class Solution {
public:
void dfs(int open, int close, int n, string current, vector<string>& res) {
        if (open == n && close == n) {
            res.push_back(current);
            return;
        }
        
        if (open < n) {
            dfs(open + 1, close, n, current + "(", res);
        }
        
        if (close < open) {
            dfs(open, close + 1, n, current + ")", res);
        }
    }
    
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        dfs(0, 0, n, "", res);
        return res;
    }
};
