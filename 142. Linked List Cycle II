/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
       if (!head || !head->next) {
            return nullptr; // If there's no head or only one node, there can't be a cycle
        }

        ListNode* slow = head;
        ListNode* fast = head;
        bool hasCycle = false;

        // Detect cycle using Floyd's algorithm
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) {
                hasCycle = true;
                break;
            }
        }

        // If no cycle found, return nullptr
        if (!hasCycle) {
            return nullptr;
        }

        // Find the starting point of the cycle
        slow = head;
        while (slow != fast) {
            slow = slow->next;
            fast = fast->next;
        }

        return slow;
    }
};
